{"version":3,"sources":["components/Users/Users.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/NavBar/NavBar.jsx","redux/dialogsReducer.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","utils/validators/validator.js","components/common/FormsControls/FormsControls.js","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/HoC/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.js","components/Users/Paginator.jsx","assets/images/avatar.jpg","components/Users/User.jsx","components/Users/Users.jsx","api/api.js","redux/UsersReducer.js","assets/images/load.svg","components/common/Preloader/Preloader.js","redux/usersSelectors.js","components/Users/UsersContainer.js","assets/images/rabbit.jpg","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","redux/profileReducer.js","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","assets/images/header-wallpaper.jpg","components/Header/Header.jsx","redux/authReducer.js","components/Header/HeaderContainer.jsx","components/Login/LoginForm.jsx","components/Login/Login.jsx","redux/appReducer.js","App.js","reportWebVitals.js","redux/redux-store.js","index.js","components/Dialogs/Dialogs.module.css","components/NavBar/NavBar.module.css","components/common/FormsControls/FormsControl.module.css","components/Users/Paginator.module.css","components/Header/Header.module.css"],"names":["module","exports","NavBar","className","s","nav","item","to","SEND_MESSAGE","initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","type","body","newMessageBody","DialogItem","props","dialog","Message","reguiredField","value","maxLengthCreator","maxLength","length","Textarea","input","meta","hasError","touched","error","formControl","Input","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogsElements","map","messagesElements","dialogsItems","values","sendMessage","mapStateToProps","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessageCreator","Component","RedirectComponent","this","React","Paginator","totalUsersCount","pageSize","currentPage","onPageChanged","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionNumber","paginator","onClick","filter","p","cn","selectedPage","pageNumber","e","User","user","followingInProgress","follow","unfollow","src","photos","small","userPhoto","followed","disabled","some","status","Users","users","instance","axios","create","withCredentials","baseURL","headers","usersAPI","get","then","response","data","post","delete","userId","profileAPI","getProfile","getStatus","updateStatus","put","authAPI","email","login","rememberMe","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGAL_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","isFetching","followSuccess","unfollowSuccess","toggleIsFetching","toggleFollowingProgress","usersReducer","u","count","Preloader","load","getUsersSelector","usersPage","getPageSizeSelector","getTotalUsersCountSelector","getCurrentPageSelector","getIsFetchingSelector","getFollowingInProgressSelector","UsersContainer","getUsers","a","resultCode","setCurrentPage","items","totalCount","ProfileStatus","useState","editMode","setEditMode","setStatus","onDoubleClick","onChange","currentTarget","onBlur","autoFocus","ProfileInfo","profile","large","rabbit","ADD_POST","SET_USER_PROFILE","SET_STATUS","posts","likesCount","newPostText","profileReducer","newPost","Post","AddPostFormRedux","MyPosts","postsElements","onAddPost","MyPostsContainer","profilePage","addPost","Profile","content","ProfileContainer","match","params","myID","getUserProfile","withRouter","Header","header","image","loginBlock","logoutThunk","SET_USER_DATA","setAuthUserData","getAuthUserData","authReducer","HeaderContainer","ReduxLoginForm","formSummaryError","loginThunk","password","stopSubmit","_error","formData","INITIALIZED_SUCCESS","initialized","appReducer","App","initializeApp","path","render","DialogsContainer","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3ecd6a8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__80ggd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__3jwmc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2UUPI\"};","import s from './NavBar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile'>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/users'>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/dialogs'>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news'>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music'>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings'>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\n/*NavLink - просто изменяют URL в браузере, не используем тег \"а\" так как он перезагружает страницу*/\r\n\r\nexport default NavBar","const SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Arman'},\r\n        {id: 2, name: 'Beka'},\r\n        {id: 3, name: 'Zabit'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'How are you'},\r\n        {id: 3, message: 'Good bye'}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTIONS\r\nexport const sendMessageCreator = (newMessageBody) => ({type: SEND_MESSAGE, newMessageBody: newMessageBody})\r\nexport default dialogsReducer","import s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem","import s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message","// ТУТ МЫ СОЗДАЕМ ПРАВИЛА ЗАПОЛНЕНИЯ ФОРМ\r\n\r\nexport const reguiredField = value => {     // Если поле пустое\r\n    if (value) return undefined\r\n    return 'error message'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {   // Если размер символов превышен\r\n    if (value.length > maxLength) return 'Max length is ' + maxLength + ' symbols'\r\n    return undefined\r\n}","import s from './FormsControl.module.css'\r\n// Вместо обычных textarea & input, мы используем компоненты, так как на них можно использовать стили\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    //touched и error, это метаданные, которые нас информируют о действиях в строках\r\n    const hasError = meta.touched && meta.error // тут идет проверка, если есть ошибка, то добавляем css стили\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    //touched и error, это метаданные, которые нас информируют о действиях в строках\r\n    const hasError = meta.touched && meta.error // тут идет проверка, если есть ошибка, то добавляем css стили\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","import {maxLengthCreator, reguiredField} from \"../../../utils/validators/validator\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport * as React from \"react\";\r\n\r\nconst maxLength = maxLengthCreator(100)         // Максимальная длина сообщения, вынесли отдельно так как в компоненте замыкание\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (                                             // onSubmit - возникает при отправке формы, handleSubmit собирает все данные с форм\r\n                                                         // validate - что то вроде критерия заполнения форм\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}             // Textarea компонента, используем вместо обычного тега textarea, так как накидываем стили\r\n                       name={'newMessageBody'}          // Имя, через которое мы обращаемся к содержимому формы\r\n                       placeholder='Enter your message' // Просто надпись по дефолту\r\n                       validate={[reguiredField, maxLength]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm) //HoC, который через props прокидывает функцию handleSubmit","import s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport * as React from \"react\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>)\r\n    let messagesElements = props.messages.map(message => <Message message={message.message}/>)\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n        values.newMessageBody = ''\r\n    }\r\n// onSubmit={addNewMessage}, вызываем функцию addNewMessage в которую передаем собранные данные из AddMessageForm-handleSubmit\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs\r\n","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => ({              //withAuthRedirect должен знать isAuth, иначе не будет знать когда отрисовыввать\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {    //HOC - защищает от незаристрированных пользователей\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (this.props.isAuth === false) return <Redirect to='/login'/>\r\n            else return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import * as React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../HoC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect) //withAuthRedirect HOC - отвечает за Логинизацию, если незалогинены, то скрывает Компонент\r\n(Dialogs);\r\n\r\n\r\n\r\n","import * as React from \"react\";\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\nlet Paginator = ({totalUsersCount, pageSize, currentPage, onPageChanged}) => {\r\n\r\n    let portionSize = 5                                       // Кол-во отображаемых страниц\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize) // Общее кол-во страниц\r\n\r\n    let pages = [];                                           // Массив страниц\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {                   // Массив страниц\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)         // Порции отображаемых страниц\r\n    let [portionNumber, setPortionNumber] = React.useState(1)// Конкретная порция страниц  HOOK\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1 // Левый край порции страниц\r\n    let rightPortionNumber = portionNumber * portionSize              // Правый край порции страниц\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>\r\n            }\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [s.selectedPage]: currentPage === p\r\n                    }, s.pageNumber)} key={p} onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }\r\n                    }>\r\n                        {p}\r\n                    </span>\r\n                })}\r\n            {portionCount > portionNumber && <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","export default __webpack_public_path__ + \"static/media/avatar.1c45f064.jpg\";","import {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/images/avatar.jpg\";\r\nimport s from \"./Users.module.css\";\r\nimport * as React from \"react\";\r\n\r\nlet User = ({user, followingInProgress, follow, unfollow}) => {\r\n    return (\r\n        <div key={user.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto} className={s.userPhoto}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed ?\r\n                            <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                unfollow(user.id)  //thunk\r\n                            }}>Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                follow(user.id)    //thunk\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>Kazakhstan</div>\r\n                        <div>Astana</div>\r\n                    </span>\r\n                </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import * as React from \"react\";\r\nimport Paginator from \"./Paginator\";\r\nimport User from \"./User\";\r\n\r\nlet Users = (props) => {\r\n    return (\r\n        <div>\r\n            <Paginator currentPage={props.currentPage}\r\n                       onPageChanged={props.onPageChanged}\r\n                       pageSize={props.pageSize}\r\n                       totalUsersCount={props.totalUsersCount}/>\r\n            {\r\n                props.users.map(user => <User user={user}\r\n                                              followingInProgress={props.followingInProgress}\r\n                                              follow={props.follow}\r\n                                              unfollow={props.unfollow}/>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"8a96a599-ac69-4386-8bca-d0aad439774c\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage, pageSize) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    follow(id) {\r\n        return instance.post(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\r\n    },\r\n    unfollow(id) {\r\n        return instance.delete(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\r\n    },\r\n    getProfile(userId) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get('profile/' + userId)\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get('profile/status/' + userId)\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put('profile/status', {status: status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get('auth/me')\r\n    },\r\n    login(email, login, rememberMe = false) {\r\n        return instance.post('auth/login', {email, login, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\n","import {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGAL_IS_FETCHING = 'TOGAL_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState = {\r\n    users: [],            // Массив пользователей, которые отображены на данный момент\r\n    pageSize: 5,          // Кол-во пользователей на одной странице\r\n    totalUsersCount: 0,   // Общее кол-во пользователей, получаем с Сервера\r\n    currentPage: 1,       // Текущая страница (выделенная)\r\n    isFetching: false,     // Переменная которая отвечает за Preloader(анимация загрузки, когда идет запрос от сервера)\r\n    followingInProgress: [] //Переменная которая отвечает за то, чтобы кнопку не затр*хали\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGAL_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users) => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (count) => ({type: SET_TOTAL_USERS_COUNT, count})\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGAL_IS_FETCHING, isFetching})\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\n//THUNK'S\r\nexport const getUsers = (currentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))          // создает картинку, когда файлы подгружаются\r\n        let response = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))        //картинка загрузки исчезает, так как с сервера получили данные\r\n        dispatch(setUsers(response.items))                //передаем значения в массив\r\n        dispatch(setTotalUsersCount(response.totalCount)) //Берем с сервера общее кол-во людей  и присваиваем переменной totalUsersCount\r\n    }\r\n}\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))   // создает картинку, когда файлы подгружаются\r\n        let response = await usersAPI.follow(userId)\r\n        if (response.data.resultCode == 0) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))   // создает картинку, когда файлы подгружаются\r\n        let response = await usersAPI.unfollow(userId)\r\n        if (response.data.resultCode == 0) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport default usersReducer;","export default __webpack_public_path__ + \"static/media/load.e8c59371.svg\";","import load from \"../../../assets/images/load.svg\";\r\n// Компонента которая просто отображает картинку заргузки\r\nlet Preloader = (props) => {\r\n    return (\r\n        <div>\r\n            <img src={load}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","export const getUsersSelector = (state) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSizeSelector = (state) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCountSelector = (state) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPageSelector = (state) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetchingSelector = (state) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgressSelector = (state) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n","import * as React from \"react\";\r\nimport Users from \"./Users\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, setCurrentPage,\r\n    unfollow, toggleFollowingProgress, getUsers,\r\n} from \"../../redux/UsersReducer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPageSelector, getFollowingInProgressSelector, getIsFetchingSelector,\r\n    getPageSizeSelector,\r\n    getTotalUsersCountSelector,\r\n    getUsersSelector\r\n} from \"../../redux/usersSelectors\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsersSelector(state),                             // Массив пользователей, которые отображены на данный момент\r\n        pageSize: getPageSizeSelector(state),                       // Кол-во пользователей на одной странице\r\n        totalUsersCount: getTotalUsersCountSelector(state),         // Общее кол-во пользователей, получаем с Сервера\r\n        currentPage: getCurrentPageSelector(state),                 // Текущая страница (выделенная)\r\n        isFetching: getIsFetchingSelector(state),                   // Переменная которая отвечает за Preloader\r\n        followingInProgress: getFollowingInProgressSelector(state)\r\n    }\r\n}\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize); //Санка, получаем пользователей\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {                                     //Функция которая меняет текущую страницу\r\n        this.props.getUsers(pageNumber, this.props.pageSize);             //Санка, получаем пользователей\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}/>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage,\r\n        getUsers, toggleFollowingProgress\r\n    }))(UsersContainer);\r\n","export default __webpack_public_path__ + \"static/media/rabbit.f72a6f43.jpg\";","import React from 'react';\r\n\r\nconst ProfileStatus = (props) => {\r\n\r\n    let [editMode, setEditMode] = React.useState(false) //Hook, используем деструктуризацию. editMode булева переменная, setEditMode функция для изменения editMode\r\n    let [status, setStatus] = React.useState(props.status)       // Тут такая же суета как ▲, только в параметр передаем данные из стейта\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} onBlur={deactivateMode} autoFocus={true}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus","import rabbit from '../../../assets/images/rabbit.jpg'\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {props.profile ? <img src={props.profile.photos.large}/> : <img src={rabbit}/>}\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\nlet initialState = {\r\n    posts: [                  // Посты которые мы отображаем\r\n        {id: 1, message: 'Hello', likesCount: 10},\r\n        {id: 2, message: 'How are you', likesCount: 12}\r\n    ],\r\n    newPostText: 'it-hub',    // Текст по умолчанию в поле ввода\r\n    profile: null,            // Отображаемый профиль\r\n    status: \"\"                // Статус который мы отображаем\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPost,\r\n                likesCount: 17\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// ACTIONS\r\nexport const addPost = (newPost) => ({type: ADD_POST, newPost})\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile: profile})\r\nexport const setStatus = (status) => ({type: SET_STATUS, status: status})\r\n\r\n// THUNK'S\r\nexport const getUserProfile = (userId) => {    //Получаем с сервера данные пользователя\r\n    return async (dispatch) => {\r\n        let response = await usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId) => {          //Получаем с сервера статус пользователя\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status) => {      //Передаем на сервер новый статус пользователя\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer","import s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://liquipedia.net/commons/images/4/41/Slardar_Large.png'/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post","import * as React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, reguiredField} from \"../../../utils/validators/validator\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPost'}\r\n                       placeholder='Enter your post'\r\n                       validate={[reguiredField, maxLength]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm({form: 'profileAddPostForm'})(AddPostForm)\r\n","import s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport * as React from \"react\";\r\nimport {AddPostFormRedux} from \"./AddPostForm\";\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let AddPost = (values) => {\r\n        props.onAddPost(values.newPost);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Мои Посты\r\n            <AddPostFormRedux onSubmit={AddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts","import * as React from \"react\";\r\nimport {addPost} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAddPost: (newPost) => {\r\n            dispatch(addPost(newPost))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","import s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile","import * as React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId    // match.params позволяет нам считать URL\r\n        if (!userId) {                                 // Если userId не передается в УРЛ, то по умолчанию отображаем наш аккаунт\r\n            userId = this.props.myID                   // Наш id, получили в App - initializeApp()\r\n        }\r\n        this.props.getUserProfile(userId)              //thunk, получаем данные о профиле пользователя\r\n        this.props.getStatus(userId)                   //thunk, получаем статус пользователя\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    myID: state.auth.userId\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter, // HoC который нужен для считывания URL\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/header-wallpaper.f0d11c61.jpg\";","import s from './Header.module.css'\r\nimport image from '../../assets/images/header-wallpaper.jpg'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src={image}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <div> {props.login} - <button onClick={props.logoutThunk}> Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nlet initialState = {\r\n    userId: null,       // Приходит с сервера\r\n    email: null,        // Приходит с сервера\r\n    login: null,        // Приходит с сервера\r\n    isAuth: false       // Переменная для отображения либо скрытия\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    data: {userId, email, login, isAuth}\r\n})\r\n\r\n//THUNKS\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const loginThunk = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n        dispatch(stopSubmit('login', {_error: message})) // stopSubmit это Экшн, и так как Форм это редюсер, то мы диспатчим stopSubmit.\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;","import * as React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logoutThunk} from \"../../redux/authReducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logoutThunk})(HeaderContainer)","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {reguiredField} from \"../../utils/validators/validator\";\r\nimport s from '../common/FormsControls/FormsControl.module.css'\r\n\r\n// validate - что то вроде критерия заполнения форм\r\n// Событие onSubmit возникает при отправке формы\r\nconst LoginForm = ({error, handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"}\r\n                       validate={[reguiredField]} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                       validate={[reguiredField]} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field component={'input'} name={\"rememberMe\"} type={\"checkbox\"}/> remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>\r\n                ERROR\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxLoginForm = reduxForm({form: 'login'})(LoginForm); //HoC, который через props прокидывает функцию handleSubmit\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {loginThunk, logoutThunk} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ReduxLoginForm} from \"./LoginForm\";\r\n\r\nconst Login = ({isAuth, loginThunk}) => {\r\n\r\n    const onSubmit = (formData) => { //formData - данные которые нам пришли с Формы которую заполнили, а собирается она благодаря функции handleSubmit\r\n        loginThunk(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) { // Если зарегестрированный пользователь, то переносит  на страницу профайл\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <ReduxLoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {loginThunk})(Login);","import {getAuthUserData} from \"./authReducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS :\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeApp = () => (dispatch) => { // React сам передаст внутренней функции параметр Диспатч\r\n    let promise = dispatch(getAuthUserData())      // Санка, получаем пользователя\r\n    promise.then(() => {                           // initialized - true\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\nexport default appReducer;\r\n","import React from 'react'\nimport './App.css';\nimport NavBar from \"./components/NavBar/NavBar\";\nimport {Route, withRouter} from \"react-router-dom\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.initializeApp()   // Thunk, получаем зарегистрированного пользователя с сервера, и appReducer.state.initialized становится true\n    }\n\n    render() {                       // Пока не получим данные с сервера, будем показывать экран загрузки\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <NavBar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path='/dialogs'\n                           render={() => <DialogsContainer/>}/>\n                    <Route path='/profile/:userId?'\n                           render={() => <ProfileContainer/>}/>\n                    <Route path='/users'\n                           render={() => <UsersContainer/>}/>\n                    <Route path='/login'\n                           render={() => <Login/>}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose(\n    withRouter, // Нужна эта обертка, чтобы роут с роутами нормально работал\n    connect(mapStateToProps, {initializeApp}))\n(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from \"./UsersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet reducers = combineReducers({       //здесь мы объединяем все редюсеры\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n\r\n// applyMiddleware - промежуточная херня, чтобы Редюсер мог считывать санку, так как он сам принимает только объект action\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware)); // Создание объекта store со всеми его методами (getState, dispatch, subscribe и т.д)\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n                <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n/*BrowserRouter - без перегрузки позволяет менять URL, один на весь проект.*/\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2WlUi\",\"dialogsItems\":\"Dialogs_dialogsItems__1ZFb8\",\"dialog\":\"Dialogs_dialog__2ggUc\",\"messages\":\"Dialogs_messages__3dwth\",\"message\":\"Dialogs_message__2TNXv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2dTBN\",\"item\":\"NavBar_item__12RP0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__1x3ln\",\"error\":\"FormsControl_error__1iRZn\",\"formSummaryError\":\"FormsControl_formSummaryError__2KFFP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2L-ZA\",\"pageNumber\":\"Paginator_pageNumber__3bjR4\",\"selectedPage\":\"Paginator_selectedPage__-J24H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__c6aIY\",\"loginBlock\":\"Header_loginBlock__1wVEr\"};"],"sourceRoot":""}